name: Dispatch Listener

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  BUILD_INFO_ARTIFACT_NAME: build-info
  RELEASE_BRANCHES: '["master"]'
  PRERELEASE_BRANCHES: '["develop"]'

jobs:
  Configs:
    runs-on: ubuntu-20.04
    outputs:
      isPublish: ${{ steps.isPublish.outputs.value }}
      isRelease: ${{ steps.isRelease.outputs.value }}
      isPrerelease: ${{ steps.isPrerelease.outputs.value }}
    steps:
      - name: Branch name
        id: branchName
        run: |
          value=$(basename ${GITHUB_REF})
          echo $value
          echo "value=$value" >> $GITHUB_OUTPUT
      - name: Is push
        id: isPush
        run: |
          value=${{ github.event_name == 'push'}}
          echo "value=$value" >> $GITHUB_OUTPUT
      - name: Is Release
        id: isRelease
        run: |
          value=${{ steps.isPush.outputs.value == 'true' && contains(fromJson(env.RELEASE_BRANCHES), steps.branchName.outputs.value) }}
          echo "value=$value" >> $GITHUB_OUTPUT
      - name: Is Prerelease
        id: isPrerelease
        run: |
          value=${{ steps.isPush.outputs.value == 'true' && contains(fromJson(env.PRERELEASE_BRANCHES), steps.branchName.outputs.value) }}
          echo "value=$value" >> $GITHUB_OUTPUT
      - name: Is publish
        id: isPublish
        run: |
          value=${{ steps.isRelease.outputs.value == 'true' || steps.isPrerelease.outputs.value == 'true' }}
          echo "value=$value" >> $GITHUB_OUTPUT

  GenerateAndPublishBuildInfo:
    needs: Configs
    name: Generate build info file
    runs-on: ubuntu-20.04
    steps:
      - name: Generate build info
        run: echo "BuildInfo" > ${{ env.BUILD_INFO_ARTIFACT_NAME }}.json
      - name: Publish build-info to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_INFO_ARTIFACT_NAME }}
          path: ${{ env.BUILD_INFO_ARTIFACT_NAME }}.json

  createRelease:
    if: needs.Configs.outputs.isPublish == 'true'
    runs-on: ubuntu-latest
    needs: 
      - Configs
      - GenerateAndPublishBuildInfo
    permissions:
      contents: write
    steps:
      - name: Download all artefacts
        uses: actions/download-artifact@v3
      - name: Archive artefacts
        run: |
          for d in */ ; do
            tar -czf "${d%/}.tar.gz" "$d"
          done
      - name: Transform release branches to comma separated list
        id: get-release-branches
        run: echo 'releaseBranches=${{ env.RELEASE_BRANCHES }}' | tr -d '[]\" ' >> $GITHUB_OUTPUT
      - name: Transform prerelease branches to comma separated list.
        id: get-prerelease-branches
        run: echo 'prereleaseBranches=${{ env.PRERELEASE_BRANCHES }}' | tr -d '[]\" ' >> $GITHUB_OUTPUT
      - name: Bump version
        id: tag-version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: true
          release_branches: ${{ steps.get-release-branches.outputs.releaseBranches }}
          pre_release_branches: ${{ steps.get-prerelease-branches.outputs.prereleaseBranches }}
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag-version.outputs.new_tag}}
          target_commitish: ${{ github.sha }}
          files: "*.tar.gz"
          fail_on_unmatched_files: true
          generate_release_notes: true
          prerelease: ${{ needs.BuildConfig.outputs.isPrerelease == 'true' }}