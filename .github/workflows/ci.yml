name: Dispatch Listener

on:
  push:

concurrency: production

jobs:

  job1:
    runs-on: ubuntu-latest
    environment: tofu-test
    steps:
      - name: Create file
        run: |
          mkdir -p output/path1
          mkdir -p output/path2
          echo "text1" > output/path1/my_file.txt
          echo "text2" > output/path2/my_file.txt
      - name: Upload my_artifact1
        uses: actions/upload-artifact@v3
        with:
          name: my_artifact1
          path: output/path1
      - name: Upload my_artifact2
        uses: actions/upload-artifact@v3
        with:
          name: my_artifact2
          path: output/path2

  createRelease:
    runs-on: ubuntu-latest
    needs: [job1]
    permissions:
      contents: write
    steps:
      - name: Download all artefacts
        uses: actions/download-artifact@v3
      - name: Zip artefacts
        run: zip -r artefacts.zip ./

      - name: Minor version for each merge
        id: taggerDryRun
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DRY_RUN: true
          # PRERELEASE: true
          DEFAULT_BUMP: patch

      - name: echo new tag
        run: |
          echo "The next tag version will be: ${{ steps.taggerDryRun.outputs.new_tag }}"
      - name: echo tag
        run: |
          echo "The current tag is: ${{ steps.taggerDryRun.outputs.tag }}"
      - name: echo part
        run: |
          echo "The version increment was: ${{ steps.taggerDryRun.outputs.part }}"

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.taggerDryRun.outputs.new_tag }}
          files: artefacts.zip
          fail_on_unmatched_files: true
          # prerelease: true

  # job1:
  #   runs-on: ubuntu-latest
  #   environment: tofu-test
  #   outputs:
  #     services: ${{ steps.set-matrix.outputs.services }}
  #   steps:
  #     - id: set-matrix
  #       run: echo "services=${{ toJSON(vars.SERVICES_LIST) }}" >> $GITHUB_OUTPUT
  # job2:
  #   needs: job1
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix: 
  #       service: ${{ fromJSON(needs.job1.outputs.services) }}
  #   steps:
  #     - run: echo ${{ matrix.service }}