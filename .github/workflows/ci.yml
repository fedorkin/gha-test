name: CI

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]

env:
  IS_PUBLISH: ${{ github.event_name != 'pull_request' }}
  IS_RELEASE: ${{ github.event_name == 'push' && contains('master develop', github.ref)  }}

concurrency: production

jobs:

  job1:
    runs-on: ubuntu-latest
    environment: tofu-test
    steps:
      - name: Envs
        run: |
          echo "${{ env.IS_PUBLISH }}"
          echo "${{ env.IS_RELEASE }}"
          echo "${{ github.event_name }}"
          echo "${{ github.ref }}"
      - name: Create file
        run: |
          mkdir -p output/path1
          mkdir -p output/path2
          echo "text1" > output/path1/my_file.txt
          echo "text2" > output/path2/my_file.txt
      - name: Upload my_artifact1
        uses: actions/upload-artifact@v3
        with:
          name: my_artifact1
          path: output/path1
      - name: Upload my_artifact2
        uses: actions/upload-artifact@v3
        with:
          name: my_artifact2
          path: output/path2

  createRelease:
    runs-on: ubuntu-latest
    needs: [job1]
    permissions:
      contents: write
    steps:
      - name: Download all artefacts
        uses: actions/download-artifact@v3
      - name: Zip artefacts
        run: zip -r artefacts.zip ./

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: true
          custom_release_rules: patch:patch,minort:minor,major:major

      - name: echo new tag
        run: |
          echo "The next taag  version will be: ${{ steps.tag_version.outputs.new_tag }}"
      - name: echo tag
        run: |
          echo "The currenttag is: ${{ steps.tag_version.outputs.previous_tag }}"

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag}}
          files: artefacts.zip
          fail_on_unmatched_files: true
          # prerelease: true

  # job1:
  #   runs-on: ubuntu-latest
  #   environment: tofu-test
  #   outputs:
  #     services: ${{ steps.set-matrix.outputs.services }}
  #   steps:
  #     - id: set-matrix
  #       run: echo "services=${{ toJSON(vars.SERVICES_LIST) }}" >> $GITHUB_OUTPUT
  # job2:
  #   needs: job1
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix: 
  #       service: ${{ fromJSON(needs.job1.outputs.services) }}
  #   steps:
  #     - run: echo ${{ matrix.service }}