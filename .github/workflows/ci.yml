name: Dispatch Listener

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  RELEASE_BRANCHES: '["develop"]'
  PRERELEASE_BRANCHES: '["SUBZ-185-ci-gha", "main"]'

concurrency: production

jobs:

  PublicIP:
    runs-on: ubuntu-20.04
    steps:
      - name: IpBeforeVPN
        run: |
          curl ifconfig.me

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      
      - uses: actions/checkout@v3
        with:
          repository: Jigsaw-Code/outline-sdk
          ref: junyi-outline-cli
          path: outline-sdk

      - name: Build
        run: |
          ls -R
          cd outline-sdk/x
          go build -o ./OutlineCLI  -ldflags="-extldflags=-static" ./outline-cli
      
      - name: run
        run: |
          ls -R
          cd outline-sdk/x
          sudo ./OutlineCLI "185.106.103.139" "24801" "Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpPb3RoSTRxQk1Qd1h1WU16ZHlzRkdq"

      - name: IpAfterVPN
        run: |
          curl ifconfig.me

  # Configs:
  #   runs-on: ubuntu-20.04
  #   outputs:
  #     isPublish: ${{ steps.isPublish.outputs.value }}
  #     isRelease: ${{ steps.isRelease.outputs.value }}
  #     isPrerelease: ${{ steps.isPrerelease.outputs.value }}
  #   steps:
  #     - name: Branch name
  #       id: branchName
  #       run: |
  #         value=$(basename ${GITHUB_REF})
  #         echo $value
  #         echo "value=$value" >> $GITHUB_OUTPUT
  #     - name: Is push
  #       id: isPush
  #       run: |
  #         value=${{ github.event_name == 'push'}}
  #         echo "value=$value" >> $GITHUB_OUTPUT
  #     - name: Is Release
  #       id: isRelease
  #       run: |
  #         value=${{ steps.isPush.outputs.value == 'true' && contains(fromJson(env.RELEASE_BRANCHES), steps.branchName.outputs.value) }}
  #         echo "value=$value" >> $GITHUB_OUTPUT
  #     - name: Is Prerelease
  #       id: isPrerelease
  #       run: |
  #         value=${{ steps.isPush.outputs.value == 'true' && contains(fromJson(env.PRERELEASE_BRANCHES), steps.branchName.outputs.value) }}
  #         echo "value=$value" >> $GITHUB_OUTPUT
  #     - name: Is publish
  #       id: isPublish
  #       run: |
  #         value=${{ steps.isRelease.outputs.value == 'true' || steps.isPrerelease.outputs.value == 'true' }}
  #         echo "value=$value" >> $GITHUB_OUTPUT

  # ReleaseJob:
  #   runs-on: ubuntu-20.04
  #   needs: Configs
  #   if: needs.Configs.outputs.isRelease == 'true'
  #   steps:
  #     - run: echo "isRelease:${{ needs.Configs.outputs.isRelease }}"

  # PrereleaseJob:
  #   runs-on: ubuntu-20.04
  #   needs: Configs
  #   if: needs.Configs.outputs.isPrerelease == 'true'
  #   steps:
  #     - run: echo "isPrerelease:${{ needs.Configs.outputs.isPrerelease }}"

  # createRelease:
  #   if: needs.Configs.outputs.isPublish == 'true'
  #   runs-on: ubuntu-latest
  #   needs: Configs
  #   permissions:
  #     contents: write
  #   steps:
  #     - id: set-release-branches
  #       run: echo 'releaseBranches=${{ env.RELEASE_BRANCHES }}' | tr -d '[]\" ' >> $GITHUB_OUTPUT

  #     - id: set-prerelease-branches
  #       run: echo 'prereleaseBranches=${{ env.PRERELEASE_BRANCHES }}' | tr -d '[]\" ' >> $GITHUB_OUTPUT

  #     - run: |
  #         echo "release_branches: ${{ steps.set-release-branches.outputs.releaseBranches }}"
  #         echo "pre_release_branches: ${{ steps.set-prerelease-branches.outputs.prereleaseBranches }}"
  #     - name: Bump version
  #       id: tag-version
  #       uses: mathieudutour/github-tag-action@v6.1
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         dry_run: true
  #         # release_branches: develop
  #         # pre_release_branches: SUBZ-185-ci-gha,main
  #         release_branches: ${{ steps.set-release-branches.outputs.releaseBranches }}
  #         pre_release_branches: ${{ steps.set-prerelease-branches.outputs.prereleaseBranches }}

  #     - name: echo new tag
  #       run: |
  #         echo "The next taag  version will be: ${{ steps.tag-version.outputs.new_tag }}"
  #     - name: echo tag
  #       run: |
  #         echo "The currenttag is: ${{ steps.tag-version.outputs.previous_tag }}"

  #     - name: Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: ${{ steps.tag-version.outputs.new_tag}}
  #         target_commitish: ${{ github.sha }}
  #         files: artefacts.zip
  #         fail_on_unmatched_files: true
  #         prerelease: ${{ needs.Configs.outputs.isPrerelease == 'true' }}